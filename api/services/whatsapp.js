"use strict";

const { logger } = require('./logger');

class WhatsAppService {
  constructor() {
    this.apiUrl = 'https://graph.facebook.com/v18.0';
    this.phoneNumberId = process.env.WHATSAPP_PHONE_NUMBER_ID;
    this.accessToken = process.env.WHATSAPP_ACCESS_TOKEN;
    this.verifyToken = process.env.WHATSAPP_VERIFY_TOKEN;
    this.businessNumber = process.env.WHATSAPP_BUSINESS_NUMBER || '+5521999999999';
  }

  // Verificaci√≥n de webhook
  verifyWebhook(req, res) {
    const mode = req.query['hub.mode'];
    const token = req.query['hub.verify_token'];
    const challenge = req.query['hub.challenge'];

    if (mode && token) {
      if (mode === 'subscribe' && token === this.verifyToken) {
        logger.info('WhatsApp webhook verified');
        res.status(200).send(challenge);
      } else {
        res.sendStatus(403);
      }
    }
  }

  // Procesar mensajes entrantes
  async processIncomingMessage(req, res) {
    try {
      const body = req.body;

      if (body.object === 'whatsapp_business_account') {
        body.entry?.forEach(entry => {
          const changes = entry.changes?.[0];
          
          if (changes?.field === 'messages') {
            const messages = changes.value?.messages;
            
            messages?.forEach(message => {
              this.handleIncomingMessage(message, changes.value.contacts?.[0]);
            });
          }
        });
      }

      res.sendStatus(200);
    } catch (error) {
      logger.error('Error processing WhatsApp message:', error);
      res.sendStatus(500);
    }
  }

  async handleIncomingMessage(message, contact) {
    const phoneNumber = message.from;
    const messageText = message.text?.body?.toLowerCase();
    const contactName = contact?.profile?.name || 'Cliente';

    logger.info('WhatsApp message received', {
      from: phoneNumber,
      text: messageText,
      name: contactName
    });

    // Bot autom√°tico b√°sico
    if (messageText) {
      if (messageText.includes('reserva') || messageText.includes('booking')) {
        await this.sendBookingInfo(phoneNumber, contactName);
      } else if (messageText.includes('precio') || messageText.includes('tarifa')) {
        await this.sendPricingInfo(phoneNumber);
      } else if (messageText.includes('ubicacion') || messageText.includes('direccion')) {
        await this.sendLocationInfo(phoneNumber);
      } else if (messageText.includes('disponibilidad')) {
        await this.sendAvailabilityInfo(phoneNumber);
      } else if (messageText.includes('cancelar')) {
        await this.sendCancellationInfo(phoneNumber);
      } else {
        await this.sendWelcomeMessage(phoneNumber, contactName);
      }
    }
  }

  // Enviar mensaje de texto
  async sendMessage(to, text) {
    try {
      const payload = {
        messaging_product: 'whatsapp',
        to: to,
        type: 'text',
        text: { body: text }
      };

      const response = await fetch(`${this.apiUrl}/${this.phoneNumberId}/messages`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        throw new Error(`WhatsApp API error: ${response.status}`);
      }

      logger.info('WhatsApp message sent', { to, text: text.substring(0, 50) });
      return await response.json();
    } catch (error) {
      logger.error('Error sending WhatsApp message:', error);
      throw error;
    }
  }

  // Mensajes autom√°ticos del bot
  async sendWelcomeMessage(phoneNumber, name) {
    const message = `Hola ${name}! üëã

Bienvenido a Lapa Casa Hostel en Santa Teresa, Rio de Janeiro.

¬øEn qu√© puedo ayudarte hoy?

‚Ä¢ üè® *Reservas* - Hacer una reserva
‚Ä¢ üí∞ *Precios* - Ver tarifas
‚Ä¢ üìç *Ubicaci√≥n* - C√≥mo llegar
‚Ä¢ üìÖ *Disponibilidad* - Consultar fechas
‚Ä¢ ‚ùå *Cancelar* - Cancelar reserva

Escribe la palabra clave o habla con nuestro equipo: ${this.businessNumber}`;

    await this.sendMessage(phoneNumber, message);
  }

  async sendBookingInfo(phoneNumber, name) {
    const message = `üè® *Reservas - Lapa Casa Hostel*

Hola ${name}, puedes hacer tu reserva de 2 formas:

üåê *Online (Recomendado):*
https://lapacasahostel.com

üì± *Por WhatsApp:*
Env√≠anos:
‚Ä¢ Fechas de entrada y salida
‚Ä¢ N√∫mero de hu√©spedes (hombres/mujeres)
‚Ä¢ Nombre completo
‚Ä¢ Email

üí° *Ventajas del sitio web:*
‚Ä¢ Selecci√≥n espec√≠fica de camas
‚Ä¢ Pago inmediato
‚Ä¢ Confirmaci√≥n instant√°nea

¬øPrefieres reservar online o seguir por WhatsApp?`;

    await this.sendMessage(phoneNumber, message);
  }

  async sendPricingInfo(phoneNumber) {
    const message = `üí∞ *Tarifas Lapa Casa Hostel*

üõèÔ∏è *Cama en dormitorio:* R$ 55/noche

üè† *Incluye:*
‚Ä¢ WiFi gratis
‚Ä¢ Desayuno b√°sico
‚Ä¢ Cocina compartida
‚Ä¢ √Årea com√∫n
‚Ä¢ Ubicaci√≥n premium en Santa Teresa

üìÖ *Pol√≠ticas:*
‚Ä¢ Check-in: 14:00
‚Ä¢ Check-out: 11:00
‚Ä¢ M√≠nimo 1 noche

¬øTe interesa hacer una reserva?`;

    await this.sendMessage(phoneNumber, message);
  }

  async sendLocationInfo(phoneNumber) {
    const message = `üìç *Ubicaci√≥n - Lapa Casa Hostel*

üè† *Direcci√≥n:*
Santa Teresa, Rio de Janeiro
(Direcci√≥n exacta enviada tras confirmaci√≥n)

üöá *C√≥mo llegar:*
‚Ä¢ Metro: Estaci√≥n Carioca (L√≠nea 1)
‚Ä¢ Bus: Varias l√≠neas a Santa Teresa
‚Ä¢ Taxi/Uber: ~15 min desde Copacabana

üéØ *Cerca de:*
‚Ä¢ Lapa (vida nocturna)
‚Ä¢ Centro hist√≥rico
‚Ä¢ Escalones de Selar√≥n
‚Ä¢ Tranv√≠a de Santa Teresa

üì± *Ubicaci√≥n exacta:*
Te enviaremos el pin de Google Maps tras la reserva.`;

    await this.sendMessage(phoneNumber, message);
  }

  async sendAvailabilityInfo(phoneNumber) {
    const message = `üìÖ *Disponibilidad - Lapa Casa Hostel*

Para consultar disponibilidad en tiempo real:

üåê *Sitio web:* https://lapacasahostel.com
(M√°s r√°pido y actualizado al minuto)

üì± *Por WhatsApp:*
Env√≠anos tus fechas:
‚Ä¢ Fecha de entrada: DD/MM/YYYY
‚Ä¢ Fecha de salida: DD/MM/YYYY
‚Ä¢ Hu√©spedes: cantidad hombres/mujeres

‚è∞ *Tiempo de respuesta:*
‚Ä¢ Web: Instant√°neo
‚Ä¢ WhatsApp: 10-30 minutos

¬øQu√© fechas te interesan?`;

    await this.sendMessage(phoneNumber, message);
  }

  async sendCancellationInfo(phoneNumber) {
    const message = `‚ùå *Cancelaciones - Lapa Casa Hostel*

üìã *Pol√≠tica de cancelaci√≥n:*
‚Ä¢ Cancelaci√≥n gratuita hasta 24h antes
‚Ä¢ Despu√©s de 24h: cargo del 50%
‚Ä¢ No-show: cargo del 100%

üìß *Para cancelar:*
1. Env√≠a tu c√≥digo de reserva
2. Nombre completo del titular
3. Fechas de la reserva

üí≥ *Reembolsos:*
‚Ä¢ Mismo m√©todo de pago
‚Ä¢ Procesamiento: 3-7 d√≠as h√°biles

¬øTienes el c√≥digo de tu reserva?`;

    await this.sendMessage(phoneNumber, message);
  }

  // Notificaciones de reservas
  async notifyNewBooking(bookingData) {
    const adminNumbers = process.env.ADMIN_WHATSAPP_NUMBERS?.split(',') || [];
    
    const message = `üîî *Nueva Reserva*

üìù *Detalles:*
‚Ä¢ ID: ${bookingData.bookingId}
‚Ä¢ Nombre: ${bookingData.guestName}
‚Ä¢ Fechas: ${bookingData.checkIn} - ${bookingData.checkOut}
‚Ä¢ Hu√©spedes: ${bookingData.guests}
‚Ä¢ Total: R$ ${bookingData.total}

üí≥ *Pago:* ${bookingData.paymentStatus}

Ver detalles: https://lapacasahostel.com/admin`;

    for (const number of adminNumbers) {
      try {
        await this.sendMessage(number.trim(), message);
      } catch (error) {
        logger.error(`Failed to notify admin ${number}:`, error);
      }
    }
  }

  async notifyPaymentConfirmed(bookingData) {
    const adminNumbers = process.env.ADMIN_WHATSAPP_NUMBERS?.split(',') || [];
    
    const message = `üí∞ *Pago Confirmado*

‚úÖ Reserva: ${bookingData.bookingId}
üë§ Cliente: ${bookingData.guestName}
üíµ Monto: R$ ${bookingData.total}

Estado: CONFIRMADO ‚úÖ`;

    for (const number of adminNumbers) {
      try {
        await this.sendMessage(number.trim(), message);
      } catch (error) {
        logger.error(`Failed to notify payment to admin ${number}:`, error);
      }
    }

    // Notificar tambi√©n al cliente
    if (bookingData.guestPhone) {
      const guestMessage = `‚úÖ *Pago Confirmado*

¬°Hola ${bookingData.guestName}!

Tu reserva est√° confirmada:
‚Ä¢ ID: ${bookingData.bookingId}
‚Ä¢ Fechas: ${bookingData.checkIn} - ${bookingData.checkOut}
‚Ä¢ Total pagado: R$ ${bookingData.total}

üìß Recibir√°s instrucciones por email.
üì± Para dudas: ${this.businessNumber}

¬°Te esperamos en Lapa Casa Hostel! üè®`;

      try {
        await this.sendMessage(bookingData.guestPhone, guestMessage);
      } catch (error) {
        logger.error('Failed to notify guest:', error);
      }
    }
  }

  // Enviar recordatorios autom√°ticos
  async sendCheckInReminder(bookingData) {
    if (!bookingData.guestPhone) return;

    const message = `üè® *Recordatorio Check-in*

¬°Hola ${bookingData.guestName}!

Tu check-in es ma√±ana en Lapa Casa Hostel.

üìÖ *Tu reserva:*
‚Ä¢ Fecha: ${bookingData.checkIn}
‚Ä¢ Hora: 14:00 - 22:00
‚Ä¢ C√≥digo: ${bookingData.bookingId}

üìç *Direcci√≥n:*
[Ubicaci√≥n se enviar√° 24h antes]

üì± *Contacto emergencia:*
${this.businessNumber}

¬°Te esperamos! üòä`;

    try {
      await this.sendMessage(bookingData.guestPhone, message);
      logger.info('Check-in reminder sent', { bookingId: bookingData.bookingId });
    } catch (error) {
      logger.error('Failed to send check-in reminder:', error);
    }
  }

  // Configurar webhooks
  setupWebhookRoutes(app) {
    // Verificaci√≥n del webhook
    app.get('/webhooks/whatsapp', (req, res) => {
      this.verifyWebhook(req, res);
    });

    // Procesar mensajes entrantes
    app.post('/webhooks/whatsapp', (req, res) => {
      this.processIncomingMessage(req, res);
    });
  }

  // Verificar configuraci√≥n
  isConfigured() {
    return !!(this.phoneNumberId && this.accessToken && this.verifyToken);
  }

  getStatus() {
    return {
      configured: this.isConfigured(),
      phoneNumberId: this.phoneNumberId ? 'set' : 'missing',
      accessToken: this.accessToken ? 'set' : 'missing',
      verifyToken: this.verifyToken ? 'set' : 'missing',
      businessNumber: this.businessNumber
    };
  }
}

module.exports = new WhatsAppService();
